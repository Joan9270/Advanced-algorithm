public class Solution {
    /**
     * @param s : A string
     * @return : The length of the longest substring 
     *           that contains at most k distinct characters.
     */
    public int lengthOfLongestSubstringKDistinct(String s, int k) {
        // write your code here
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        int i = 0, j = 0;
        int maxLen = 0;
        char c;
        for (i = 0 ; i < s.length(); i++) {
            while ( j < s.length()) {
             c = s.charAt(j);
            if (map.containsKey(c)) {
                map.put(c, map.get(c) + 1);
            } else {
                if (map.size() == k)
                break;
                map.put(c, 1);
            }
            j++;
        }
        maxLen = Math.max(maxLen, j-i);
        c = s.charAt(i);
        if(map.containsKey(c)) {
        int count = map.get(c);
        if (map.get(c) > 1) {
            map.put(c, count -1);
        } else {
            map.remove(c);
        }
        }
        }
        
        return maxLen;
    }
}
// has to check map.containsKey(c)
